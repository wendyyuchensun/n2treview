// boostrap
@256
D=A
@SP
M=D
@return0
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@0
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.init
0;JMP
(return0)
// FibonacciElement/Main: function Main.fibonacci 0
(Main.fibonacci)
// FibonacciElement/Main: push argument 0
@ARG
D=M
@0
D=D+A
A=D
D=M
@SP
A=M
M=D
@SP
M=M+1
// FibonacciElement/Main: push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// FibonacciElement/Main: lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@LT.true.0
D;JLT
@SP
A=M-1
M=0
@LT.end.0
0;JMP
(LT.true.0)
@SP
A=M-1
M=-1
(LT.end.0)
// FibonacciElement/Main: if-goto IF_TRUE
@SP
A=M
M=D
@SP
AM=M-1
@IF_TRUE
D;JNE
// FibonacciElement/Main: goto IF_FALSE
@IF_FALSE
0;JMP
// FibonacciElement/Main: label IF_TRUE
(IF_TRUE)
// FibonacciElement/Main: push argument 0
@ARG
D=M
@0
D=D+A
A=D
D=M
@SP
A=M
M=D
@SP
M=M+1
// FibonacciElement/Main: return
@LCL
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@LCL
AM=M-1
D=M
@THAT
M=D
@LCL
AM=M-1
D=M
@THIS
M=D
@LCL
AM=M-1
D=M
@ARG
M=D
@LCL
AM=M-1
D=M
@LCL
M=D
@R13
A=M
0;JMP
// FibonacciElement/Main: label IF_FALSE
(IF_FALSE)
// FibonacciElement/Main: push argument 0
@ARG
D=M
@0
D=D+A
A=D
D=M
@SP
A=M
M=D
@SP
M=M+1
// FibonacciElement/Main: push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// FibonacciElement/Main: sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// FibonacciElement/Main: call Main.fibonacci 1
@return1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(return1)
// FibonacciElement/Main: push argument 0
@ARG
D=M
@0
D=D+A
A=D
D=M
@SP
A=M
M=D
@SP
M=M+1
// FibonacciElement/Main: push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// FibonacciElement/Main: sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// FibonacciElement/Main: call Main.fibonacci 1
@return2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(return2)
// FibonacciElement/Main: add
@SP
AM=M-1
D=M
A=A-1
M=D+M
// FibonacciElement/Main: return
@LCL
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@LCL
AM=M-1
D=M
@THAT
M=D
@LCL
AM=M-1
D=M
@THIS
M=D
@LCL
AM=M-1
D=M
@ARG
M=D
@LCL
AM=M-1
D=M
@LCL
M=D
@R13
A=M
0;JMP
// FibonacciElement/Sys: function Sys.init 0
(Sys.init)
// FibonacciElement/Sys: push constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// FibonacciElement/Sys: call Main.fibonacci 1
@return3
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(return3)
// FibonacciElement/Sys: label WHILE
(WHILE)
// FibonacciElement/Sys: goto WHILE
@WHILE
0;JMP