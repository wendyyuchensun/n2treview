class SnakeGame {
  static int l;
  static Array snake;
  static boolean init, terminated;
  static int currentDir;  

  // printSnakeIndx is mainly for debugging
  function boolean printSnakeIndxs(boolean init) {
    if (~(init)) {
      do Sys.wait(5000);
    } else {
      let init = false;
    }
    do Output.moveCursor(0, 0);
    do Snake.printIndxs(l, snake);
    return init;
  }
  
  function boolean drawSnake(boolean init) {
    if (~(init)) {
      do Sys.wait(1000);
      do Screen.clearScreen();
    } else {
      let init = false;
    }
    do Snake.drawSnake(l, snake);
    return init;
  }
  
  function void dispose(Array item) {
    do Memory.deAlloc(item);
    return;     
  } 
  // initialize a new 7-block snake 
  function void new() {
    let l = 7;
    let snake = Snake.new(l);
    let init = true;
    let terminated = false;
    let currentDir = 1;
    // let init = SnakeGame.printSnakeIndxs(init);
    let init = SnakeGame.drawSnake(init);
    return;
  }

  function void moveSnake() {
    var char key;
    var boolean reachTarget;
    var int headIndx, headX, headY, randX, randY;
    var Block headBlock, randBlock;
    var Array newSnake;
    while (~(terminated)) {
      let key = Keyboard.keyPressed();
      let headIndx = l - 1;
      let headBlock = snake[headIndx];
      let headX = headBlock.getX();
      let headY = headBlock.getY();
      let randBlock = snake[l];
      let randX = randBlock.getX();
      let randY = randBlock.getY();
      if (key = 132) {
        let currentDir = 1;
        let headX = headX + 1;
      }
      if (key = 130) {
        let currentDir = 2;
        let headX = headX - 1;
      }
      if (key = 131) {
        let currentDir = 3;
        let headY = headY + 1;
      }
      if (key = 133) {
        let currentDir = 4;
        let headY = headY - 1;
      }
      if ((headX = randX) & (headY = randY)) {
        // when snake reaches the target rand block
        // make the snake 1 block longeret l = l + 1;
        let newSnake = Snake.addBlock(l, snake);
				do SnakeGame.dispose(snake);
        let snake = newSnake;
        let l = l + 1;
      } else {
        do Snake.moveBody(l, snake);
        do Snake.moveHead(l, snake, currentDir);
      }
      // let init = SnakeGame.printSnakeIndxs(init);
      let init = SnakeGame.drawSnake(init);
    }
    return;
  }
}
